// Generated by gencpp from file co2_concentration/co2_transRequest.msg
// DO NOT EDIT!


#ifndef CO2_CONCENTRATION_MESSAGE_CO2_TRANSREQUEST_H
#define CO2_CONCENTRATION_MESSAGE_CO2_TRANSREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace co2_concentration
{
template <class ContainerAllocator>
struct co2_transRequest_
{
  typedef co2_transRequest_<ContainerAllocator> Type;

  co2_transRequest_()
    : x(0.0)  {
    }
  co2_transRequest_(const ContainerAllocator& _alloc)
    : x(0.0)  {
  (void)_alloc;
    }



   typedef float _x_type;
  _x_type x;





  typedef boost::shared_ptr< ::co2_concentration::co2_transRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::co2_concentration::co2_transRequest_<ContainerAllocator> const> ConstPtr;

}; // struct co2_transRequest_

typedef ::co2_concentration::co2_transRequest_<std::allocator<void> > co2_transRequest;

typedef boost::shared_ptr< ::co2_concentration::co2_transRequest > co2_transRequestPtr;
typedef boost::shared_ptr< ::co2_concentration::co2_transRequest const> co2_transRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::co2_concentration::co2_transRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::co2_concentration::co2_transRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::co2_concentration::co2_transRequest_<ContainerAllocator1> & lhs, const ::co2_concentration::co2_transRequest_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::co2_concentration::co2_transRequest_<ContainerAllocator1> & lhs, const ::co2_concentration::co2_transRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace co2_concentration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::co2_concentration::co2_transRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::co2_concentration::co2_transRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::co2_concentration::co2_transRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::co2_concentration::co2_transRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::co2_concentration::co2_transRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::co2_concentration::co2_transRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::co2_concentration::co2_transRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "abd5d1e9c3ac157a0df3ba27b65d3384";
  }

  static const char* value(const ::co2_concentration::co2_transRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xabd5d1e9c3ac157aULL;
  static const uint64_t static_value2 = 0x0df3ba27b65d3384ULL;
};

template<class ContainerAllocator>
struct DataType< ::co2_concentration::co2_transRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "co2_concentration/co2_transRequest";
  }

  static const char* value(const ::co2_concentration::co2_transRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::co2_concentration::co2_transRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 x\n"
;
  }

  static const char* value(const ::co2_concentration::co2_transRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::co2_concentration::co2_transRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct co2_transRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::co2_concentration::co2_transRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::co2_concentration::co2_transRequest_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<float>::stream(s, indent + "  ", v.x);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CO2_CONCENTRATION_MESSAGE_CO2_TRANSREQUEST_H
