// Generated by gencpp from file co2_concentration/co2_transResponse.msg
// DO NOT EDIT!


#ifndef CO2_CONCENTRATION_MESSAGE_CO2_TRANSRESPONSE_H
#define CO2_CONCENTRATION_MESSAGE_CO2_TRANSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace co2_concentration
{
template <class ContainerAllocator>
struct co2_transResponse_
{
  typedef co2_transResponse_<ContainerAllocator> Type;

  co2_transResponse_()
    : y(0.0)  {
    }
  co2_transResponse_(const ContainerAllocator& _alloc)
    : y(0.0)  {
  (void)_alloc;
    }



   typedef float _y_type;
  _y_type y;





  typedef boost::shared_ptr< ::co2_concentration::co2_transResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::co2_concentration::co2_transResponse_<ContainerAllocator> const> ConstPtr;

}; // struct co2_transResponse_

typedef ::co2_concentration::co2_transResponse_<std::allocator<void> > co2_transResponse;

typedef boost::shared_ptr< ::co2_concentration::co2_transResponse > co2_transResponsePtr;
typedef boost::shared_ptr< ::co2_concentration::co2_transResponse const> co2_transResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::co2_concentration::co2_transResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::co2_concentration::co2_transResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::co2_concentration::co2_transResponse_<ContainerAllocator1> & lhs, const ::co2_concentration::co2_transResponse_<ContainerAllocator2> & rhs)
{
  return lhs.y == rhs.y;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::co2_concentration::co2_transResponse_<ContainerAllocator1> & lhs, const ::co2_concentration::co2_transResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace co2_concentration

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::co2_concentration::co2_transResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::co2_concentration::co2_transResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::co2_concentration::co2_transResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::co2_concentration::co2_transResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::co2_concentration::co2_transResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::co2_concentration::co2_transResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::co2_concentration::co2_transResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e398b5165b9d5a30766109048cba53de";
  }

  static const char* value(const ::co2_concentration::co2_transResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe398b5165b9d5a30ULL;
  static const uint64_t static_value2 = 0x766109048cba53deULL;
};

template<class ContainerAllocator>
struct DataType< ::co2_concentration::co2_transResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "co2_concentration/co2_transResponse";
  }

  static const char* value(const ::co2_concentration::co2_transResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::co2_concentration::co2_transResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 y\n"
"\n"
;
  }

  static const char* value(const ::co2_concentration::co2_transResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::co2_concentration::co2_transResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.y);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct co2_transResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::co2_concentration::co2_transResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::co2_concentration::co2_transResponse_<ContainerAllocator>& v)
  {
    s << indent << "y: ";
    Printer<float>::stream(s, indent + "  ", v.y);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CO2_CONCENTRATION_MESSAGE_CO2_TRANSRESPONSE_H
